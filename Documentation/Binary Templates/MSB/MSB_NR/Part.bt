//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: MSB/NR/Part.bt
//   Authors: TKGP
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

enum <int> PartType {
    P_MAP = 0,
    P_OBJ = 1,
    P_ENE = 2,
    P_PLAYER = 4,
    P_HIT = 5,
    P_DUMMY_OBJ = 9,
    P_DUMMY_ENE = 10,
    P_CONNECT_HIT = 11,
    P_INVALID = 12,
    P_GEOM = 13,
};

struct PartStruct50;
struct PartStruct58;
struct PartCommon;
struct PartGparam;
struct PartSceneGparam;
struct PartGrass;
struct PartStruct88;
struct PartStruct90;
struct PartStruct98;
struct PartStructa0;
struct PartStructa8;

struct PartMap;
struct PartEnemy;
struct PartPlayer;
struct PartHit;
struct PartDummyObject;
struct PartConnectHit;
struct PartGeom;

//------------------------------------------------

typedef struct {
    local quad start <hidden=true> = FTell();
    
    quad nameOffset <format=hex>; Assert(nameOffset);
    int partNo; // -1
    PartType type;
    int typeIndex;
    int modelIndex; // -1
    quad fileOffset <format=hex>; Assert(fileOffset);
    Vector3 position; // 0
    Vector3 angle; // 0
    Vector3 scale; // 1
    int unk44; // 0
    int mapStudioLayer; // -1; Unused, but still functional
    int unk4c <hidden=true>; Assert(!unk4c);
    quad offset50 <format=hex>; Assert(offset50);
    quad offset58 <format=hex>;
    quad commonOffset <format=hex>; Assert(commonOffset);
    quad typeOffset <format=hex>; Assert(typeOffset);
    quad gparamOffset <format=hex>;
    quad sceneGparamOffset <format=hex>;
    quad grassOffset <format=hex>;
    quad offset88 <format=hex>; Assert(offset88);
    quad offset90 <format=hex>;
    quad offset98 <format=hex>; Assert(offset98);
    quad offseta0 <format=hex>;
    quad offseta8 <format=hex>;
    quad unkb0 <hidden=true>; Assert(!unkb0);
    quad unkb8 <hidden=true>; Assert(!unkb8);
    
    FSeek(start + nameOffset);
    wstring name;
    
    FSeek(start + fileOffset);
    wstring file;
    
    // Align: 8
    FSeek(start + offset50);
    PartStruct50 struct50;
    
    // Hit, Connect Hit, Geom
    if (offset58) {
        FSeek(start + offset58);
        PartStruct58 struct58;
    }
    
    FSeek(start + commonOffset);
    PartCommon common;
    
    FSeek(start + typeOffset);
    switch (type) {
        case P_MAP: PartMap map; break;
        case P_ENE: PartEnemy enemy; break;
        case P_PLAYER: PartPlayer player; break;
        case P_HIT: PartHit hit; break;
        case P_DUMMY_OBJ: PartDummyObject dummyObj; break;
        case P_DUMMY_ENE: PartEnemy dummyEnemy; break;
        case P_CONNECT_HIT: PartConnectHit connectHit; break;
        case P_GEOM: PartGeom geom; break;
        default: Assert(false, Str("Unknown part type: %d", type));
    }
    
    // Map, Ene, Hit, Dummy Obj, Dummy Ene, Geom
    if (gparamOffset) {
        FSeek(start + gparamOffset);
        PartGparam gparam;
    }
    
    // Hit
    if (sceneGparamOffset) {
        FSeek(start + sceneGparamOffset);
        PartSceneGparam sceneGparam;
    }
    
    // Map, Geom
    if (grassOffset) {
        FSeek(start + grassOffset);
        PartGrass grass;
    }
    
    FSeek(start + offset88);
    PartStruct88 struct88;
    
    // Map, Geom
    if (offset90) {
        FSeek(start + offset90);
        PartStruct90 struct90;
    }
    
    FSeek(start + offset98);
    PartStruct98 struct98;
    
    // Map, Hit, Connect Hit, Geom
    if (offseta0) {
        FSeek(start + offseta0);
        PartStructa0 structa0;
    }
    
    // Ene, Geom
    if (offseta8) {
        FSeek(start + offseta8);
        PartStructa8 structa8;
    }
} Part <read=ReadPart, bgcolor=cLtBlue>;

wstring ReadPart(Part &p) {
    return Str("[%4d] <%s> ", p.typeIndex, EnumToString(p.type)) + p.name;   
}

//------------------------------------------------

typedef struct {
    uint dispGroups[8]; // 0
    uint drawGroups[8]; // 0
    uint hitMask[32]; // 0
    byte unkc0; Assert(IsBool(unkc0)); // 0
    byte unkc1; Assert(IsBool(unkc1)); // 0
    short unkc2 <hidden=true>; Assert(!unkc2);
    short unkc4 <hidden=true>; Assert(unkc4 == -1);
    short unkc6 <hidden=true>; Assert(!unkc6);
    
    local int i <hidden=true>;
    for (i = 0; i < 48; i++) {
        int unkc8 <hidden=true>; Assert(!unkc8);
    }
} PartStruct50;

typedef struct {
    int unk00; // -1
    uint dispGroups[8]; // 0
    short unk24 <hidden=true>; Assert(!unk24);
    short unk26 <hidden=true>; Assert(unk26 == -1);
    int unk28 <hidden=true>; Assert(!unk28);
    int unk2c <hidden=true>; Assert(!unk2c);
    int unk30 <hidden=true>; Assert(!unk30);
    int unk34 <hidden=true>; Assert(!unk34);
    int unk38 <hidden=true>; Assert(!unk38);
    int unk3c <hidden=true>; Assert(!unk3c);
    int unk40 <hidden=true>; Assert(!unk40);
    int unk44 <hidden=true>; Assert(!unk44);
} PartStruct58;

typedef struct {
    uint entityId; // 0
    byte unk04; Assert(IsBool(unk04)); // 0
    byte unk05; Assert(IsBool(unk05)); // 0
    short unk06 <hidden=true>; Assert(!unk06);
    int unk08; // 0
    byte unk0c; Assert(IsBool(unk0c)); // 0
    byte unk0d; Assert(IsBool(unk0d)); // 0
    byte unk0e; Assert(IsBool(unk0e)); // 0
    byte unk0f; Assert(IsBool(unk0f)); // 1
    byte unk10; Assert(IsBool(unk10)); // 0
    byte unk11; Assert(IsBool(unk11)); // 1
    short unk12 <hidden=true>; Assert(!unk12);
    byte unk14; Assert(IsBool(unk14)); // 0
    byte unk15; Assert(IsBool(unk15)); // 0
    byte unk16; Assert(IsBool(unk16)); // 0
    byte unk17; Assert(IsBool(unk17)); // 0
    short unk18 <hidden=true>; Assert(!unk18);
    byte unk1a; Assert(IsBool(unk1a)); // 0
    byte unk1b; // 0
    uint entityGroupIds[8]; // 0
    short unk3c; // -1
    short unk3e; // 0
    int unk40; // 0
    int variation; // -1
    int unk48 <hidden=true>; Assert(!unk48);
    int unk4c <hidden=true>; Assert(!unk4c);
} PartCommon;

typedef struct {
    int lightId; // -1
    int fogId; // -1
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
    int unk10 <hidden=true>; Assert(!unk10);
    int unk14 <hidden=true>; Assert(!unk14);
    int unk18 <hidden=true>; Assert(!unk18);
    int unk1c <hidden=true>; Assert(!unk1c);
} PartGparam;

typedef struct {
    int unk00 <hidden=true>; Assert(!unk00);
    int unk04 <hidden=true>; Assert(!unk04);
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
    float unk10; // -1
    int unk14 <hidden=true>; Assert(!unk14);
    byte unk18; // -1
    byte unk19 <hidden=true>; Assert(unk19 == -1);
    short unk1a <hidden=true>; Assert(unk1a == -1);
    byte unk1c <hidden=true>; Assert(unk1c == -1);
    byte unk1d; // -1
    short unk1e <hidden=true>; Assert(!unk1e);
    short unk20; // -1
    short unk22 <hidden=true>; Assert(!unk22);
    int unk24 <hidden=true>; Assert(!unk24);
    int unk28 <hidden=true>; Assert(!unk28);
    int unk2c <hidden=true>; Assert(!unk2c);
    int unk30 <hidden=true>; Assert(!unk30);
    int unk34 <hidden=true>; Assert(!unk34);
    int unk38 <hidden=true>; Assert(!unk38);
    int unk3c <hidden=true>; Assert(!unk3c);
    int unk40 <hidden=true>; Assert(!unk40);
    int unk44 <hidden=true>; Assert(!unk44);
    int unk48 <hidden=true>; Assert(!unk48);
    int unk4c <hidden=true>; Assert(!unk4c);
} PartSceneGparam;

typedef struct {
    int grassTypeParamIds[6]; // 0
    int unk18 <hidden=true>; Assert(unk18 == -1);
    int unk1c <hidden=true>; Assert(!unk1c);
} PartGrass;

typedef struct {
    int unk00 <hidden=true>; Assert(!unk00);
    int unk04 <hidden=true>; Assert(!unk04);
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
    int unk10 <hidden=true>; Assert(!unk10);
    int unk14 <hidden=true>; Assert(!unk14);
    int unk18 <hidden=true>; Assert(!unk18);
    int unk1c <hidden=true>; Assert(!unk1c);
} PartStruct88;

typedef struct {
    int unk00; // 0
    int unk04 <hidden=true>; Assert(!unk04);
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
    int unk10 <hidden=true>; Assert(!unk10);
    int unk14 <hidden=true>; Assert(!unk14);
    int unk18 <hidden=true>; Assert(!unk18);
    int unk1c <hidden=true>; Assert(!unk1c);
} PartStruct90;

typedef struct {
    MapInt unk00; // -1
    int unk04; // 0
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c; // -1
    int unk10 <hidden=true>; Assert(!unk10);
    int unk14; // -1
    int unk18 <hidden=true>; Assert(!unk18);
    int unk1c <hidden=true>; Assert(!unk1c);
} PartStruct98;

typedef struct {
    int unk00 <hidden=true>; Assert(!unk00);
    int unk04 <hidden=true>; Assert(!unk04);
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
    int unk10 <hidden=true>; Assert(!unk10);
    int unk14 <hidden=true>; Assert(!unk14);
    int unk18 <hidden=true>; Assert(!unk18);
    int unk1c <hidden=true>; Assert(!unk1c);
} PartStructa0;

typedef struct {
    short unk00; // -1
    short unk02; // -1
    short unk04; // -1
    short unk06 <hidden=true>; Assert(!unk06);
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
} PartStructa8;

//------------------------------------------------

typedef struct {
    int unk00 <hidden=true>; Assert(!unk00);
    int unk04 <hidden=true>; Assert(!unk04);
} PartMap;

typedef struct {
    local quad start <hidden=true> = FTell();
    
    int unk00 <hidden=true>; Assert(unk00 == -1);
    int unk04 <hidden=true>; Assert(unk04 == -1);
    int npcThinkParamId; // 0
    int npcParamId; // 0
    int talkId; // 0
    byte unk14 <hidden=true>; Assert(!unk14);
    byte unk15; Assert(IsBool(unk15)); // 0
    short unk16; // 0
    int charaInitParamId; // -1
    int partIndex; // -1
    short patrolEventIndex; // -1; Type index in patrol route events
    short unk22; // -1
    int unk24 <hidden=true>; Assert(unk24 == -1);
    int unk28; // 0
    int unk2c; // 0
    int unk30; // 0
    int unk34; // 0
    int unk38; // -1
    byte unk3c; // -1
    byte unk3d <hidden=true>; Assert(!unk3d);
    short unk3e <hidden=true>; Assert(!unk3e);
    int unk40; // 0
    int unk44; // 0
    int unk48; // 0
    int unk4c; // 0
    int unk50 <hidden=true>; Assert(!unk50);
    int unk54 <hidden=true>; Assert(!unk54);
    int unk58 <hidden=true>; Assert(!unk58);
    int unk5c <hidden=true>; Assert(!unk5c);
    int unk60 <hidden=true>; Assert(!unk60);
    int unk64 <hidden=true>; Assert(!unk64);
    int unk68 <hidden=true>; Assert(!unk68);
    int unk6c <hidden=true>; Assert(!unk6c);
    quad offset70 <format=hex, hidden=true>; Assert(!offset70);
    quad offset78 <format=hex>; Assert(offset78);
    
    FSeek(start + offset78);
    struct {
        int unk00; Assert(!unk00);
        float unk04; Assert(unk04 == 1);
        struct {
            int unk00; Assert(unk00 == -1);
            short unk04; Assert(unk04 == -1);
            short unk06; Assert(unk06 == 10);
        } unk08[5] <optimize=false>;
        int unk30 <hidden=true>; Assert(!unk30);
        int unk34 <hidden=true>; Assert(!unk34);
        int unk38 <hidden=true>; Assert(!unk38);
        int unk3c <hidden=true>; Assert(!unk3c);
    } struct78 <hidden=true>;
} PartEnemy;

typedef struct {
    int unk00; // 0
    int unk04 <hidden=true>; Assert(!unk04);
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
} PartPlayer;

typedef struct {
    byte unk00;
    byte unk01 <hidden=true>; Assert(unk01 == -1);
    byte unk02; // -1
    byte unk03 <hidden=true>; Assert(!unk03);
    float unk04; // 0
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
    int unk10 <hidden=true>; Assert(!unk10);
    float unk14 <hidden=true>; Assert(unk14 == -1.0);
    int unk18; // -1
    int unk1c; // -1
    int unk20 <hidden=true>; Assert(unk20 == -1);
    short unk24 <hidden=true>; Assert(unk24 == -1);
    byte unk26; Assert(IsBool(unk26)); // 0
    byte unk27; Assert(IsBool(unk27)); // 0
    int unk28 <hidden=true>; Assert(!unk28);
    int unk2c <hidden=true>; Assert(unk2c == -1);
    int unk30 <hidden=true>; Assert(unk30 == -1);
    byte unk34; // 0
    byte unk35; // -1
    short unk36 <hidden=true>; Assert(!unk36);
    int unk38 <hidden=true>; Assert(unk38 == -1);
    short unk3c; // -1
    short unk3e <hidden=true>; Assert(unk3e == -1);
    int unk40 <hidden=true>; Assert(!unk40);
    int unk44 <hidden=true>; Assert(!unk44);
    int unk48 <hidden=true>; Assert(!unk48);
    short unk4c <hidden=true>; Assert(!unk4c);
    short unk4e <hidden=true>; Assert(unk4e == -1);
} PartHit;

typedef struct {
    int unk00 <hidden=true>; Assert(!unk00);
    int unk04 <hidden=true>; Assert(!unk04);
    int unk08 <hidden=true>; Assert(unk08 == -1);
    int unk0c <hidden=true>; Assert(!unk0c);
    int unk10 <hidden=true>; Assert(unk10 == -1);
    int unk14 <hidden=true>; Assert(unk14 == -1);
    int unk18 <hidden=true>; Assert(unk18 == -1);
    int unk1c <hidden=true>; Assert(unk1c == -1);
} PartDummyObject;

typedef struct {
    int parentHitIndex; // -1; Type index in hit parts
    MapId mapId;
    short unk08 <hidden=true>; Assert(!unk08);
    byte unk0a; // -1
    byte unk0b; Assert(IsBool(unk0b)); // 0
    int unk0c <hidden=true>; Assert(!unk0c);
} PartConnectHit;

typedef struct {
    local quad start <hidden=true> = FTell();
    
    byte unk00; Assert(IsBool(unk00)); // 0
    byte unk01; // 0
    short unk02 <hidden=true>; Assert(!unk02);
    int unk04; // -1
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
    byte unk10; // 0
    byte unk11; Assert(IsBool(unk11)); // 0
    byte unk12; // -1
    byte unk13 <hidden=true>; Assert(!unk13);
    int unk14; // 0
    int unk18 <hidden=true>; Assert(!unk18);
    short unk1c; // -1
    short unk1e <hidden=true>; Assert(unk1e == -1);
    int unk20 <hidden=true>; Assert(unk20 == -1);
    int unk24 <hidden=true>; Assert(unk24 == -1);
    int unk28 <hidden=true>; Assert(!unk28);
    int unk2c <hidden=true>; Assert(!unk2c);
    int unk30 <hidden=true>; Assert(unk30 == -1);
    int unk34; // -1
    int partIndex38; // -1
    int unk3c <hidden=true>; Assert(unk3c == -1);
    int partIndex40; // -1
    int partIndex44; // -1
    int partIndex48; // -1
    int partIndex4c; // -1
    int unk50 <hidden=true>; Assert(!unk50);
    int partIndex54; // -1
    int unk58; // -1
    int unk5c <hidden=true>; Assert(unk5c == -1);
    int unk60 <hidden=true>; Assert(unk60 == -1);
    int unk64 <hidden=true>; Assert(unk64 == -1);
    quad offset68 <format=hex>; Assert(offset68);
    quad offset70 <format=hex>; Assert(offset70);
    quad offset78 <format=hex>; Assert(offset78);
    quad offset80 <format=hex>; Assert(offset80);
    
    FSeek(start + offset68);
    struct {
        short unk00; Assert(IsBool(unk00)); // 0
        short unk02 <hidden=true>; Assert(unk02 == -1);
        short unk04; Assert(IsBool(unk04)); // 0
        short unk06 <hidden=true>; Assert(unk06 == -1);
        int unk08 <hidden=true>; Assert(!unk08);
        int unk0c <hidden=true>; Assert(!unk0c);
        int unk10 <hidden=true>; Assert(unk10 == -1);
        int unk14 <hidden=true>; Assert(unk14 == -1);
        int unk18 <hidden=true>; Assert(unk18 == -1);
        int unk1c <hidden=true>; Assert(unk1c == -1);
        int unk20 <hidden=true>; Assert(!unk20);
        int unk24 <hidden=true>; Assert(unk24 == -1);
        int unk28 <hidden=true>; Assert(unk28 == -1);
        int unk2c <hidden=true>; Assert(unk2c == -1);
        int unk30 <hidden=true>; Assert(!unk30);
        int unk34 <hidden=true>; Assert(!unk34);
        int unk38 <hidden=true>; Assert(!unk38);
        int unk3c <hidden=true>; Assert(!unk3c);
    } struct68;
    
    FSeek(start + offset70);
    struct {
        int unk00 <hidden=true>; Assert(!unk00);
        int unk04; // -1
        int unk08 <hidden=true>; Assert(unk08 == -1);
        int unk0c <hidden=true>; Assert(!unk0c);
        int unk10 <hidden=true>; Assert(!unk10);
        float unk14 <hidden=true>; Assert(unk14 == -1.0);
        int unk18 <hidden=true>; Assert(!unk18);
        byte unk1c; // -1
        byte unk1d <hidden=true>; Assert(unk1d == -1);
        short unk1e <hidden=true>; Assert(unk1e == -1);
        int unk20 <hidden=true>; Assert(!unk20);
        int unk24 <hidden=true>; Assert(!unk24);
        int unk28 <hidden=true>; Assert(!unk28);
        int unk2c <hidden=true>; Assert(!unk2c);
        int unk30 <hidden=true>; Assert(!unk30);
        int unk34 <hidden=true>; Assert(!unk34);
        int unk38 <hidden=true>; Assert(!unk38);
        int unk3c <hidden=true>; Assert(!unk3c);
    } struct70;
    
    FSeek(start + offset78);
    struct {
        int unk00; Assert(IsBool(unk00)); // 0
        float unk04; // 0
        short unk08 <hidden=true>; Assert(unk08 == -1);
        byte unk0a; // 0
        byte unk0b; // -1
        short unk0c; // -1
        short unk0e <hidden=true>; Assert(!unk0e);
        float unk10 <hidden=true>; Assert(unk10 == -1.0);
        int unk14 <hidden=true>; Assert(unk14 == -1);
        int unk18 <hidden=true>; Assert(unk18 == -1);
        int unk1c <hidden=true>; Assert(unk1c == -1);
        int unk20 <hidden=true>; Assert(unk20 == -1);
        byte unk24 <hidden=true>; Assert(unk24 == -1);
        byte unk25 <hidden=true>; Assert(!unk25);
        short unk26 <hidden=true>; Assert(!unk26);
        int unk28 <hidden=true>; Assert(!unk28);
        int unk2c <hidden=true>; Assert(!unk2c);
        int unk30 <hidden=true>; Assert(!unk30);
        int unk34 <hidden=true>; Assert(!unk34);
        int unk38 <hidden=true>; Assert(!unk38);
        int unk3c <hidden=true>; Assert(!unk3c);
    } struct78;
    
    FSeek(start + offset80);
    struct {
        byte unk00; Assert(IsBool(unk00)); // 0
        byte unk01 <hidden=true>; Assert(unk01 == -1);
        byte unk02; // -1
        byte unk03 <hidden=true>; Assert(!unk03);
        int unk04 <hidden=true>; Assert(!unk04);
        int unk08 <hidden=true>; Assert(!unk08);
        int unk0c <hidden=true>; Assert(!unk0c);
        int unk10 <hidden=true>; Assert(!unk10);
        int unk14 <hidden=true>; Assert(!unk14);
        int unk18 <hidden=true>; Assert(!unk18);
        int unk1c <hidden=true>; Assert(!unk1c);
        int unk20 <hidden=true>; Assert(!unk20);
        int unk24 <hidden=true>; Assert(!unk24);
        int unk28 <hidden=true>; Assert(!unk28);
        int unk2c <hidden=true>; Assert(!unk2c);
        int unk30 <hidden=true>; Assert(!unk30);
        int unk34 <hidden=true>; Assert(!unk34);
        int unk38 <hidden=true>; Assert(!unk38);
        int unk3c <hidden=true>; Assert(!unk3c);
    } struct80;
} PartGeom;
